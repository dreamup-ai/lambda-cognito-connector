import crypto from "node:crypto";
import assert from "node:assert";

const { NEW_USER_ENDPOINT, NEW_USER_PRIVATE_KEY, SIGNATURE_HEADER } =
  process.env;

assert(NEW_USER_ENDPOINT, "NEW_USER_ENDPOINT is required");
assert(NEW_USER_PRIVATE_KEY, "NEW_USER_PRIVATE_KEY is required");
assert(SIGNATURE_HEADER, "SIGNATURE_HEADER is required");

const rawPrivateKey = Buffer.from(NEW_USER_PRIVATE_KEY, "base64");
const privateKey = crypto.createPrivateKey(rawPrivateKey);

function sign(payload: string) {
  const signature = crypto.sign("sha256", Buffer.from(payload), privateKey);
  return signature.toString("base64");
}

// Generated by https://quicktype.io

export interface ConfirmSignup {
  version: string;
  region: string;
  userPoolId: string;
  userName: string;
  callerContext: CallerContext;
  triggerSource: string;
  request: Request;
  response: Response;
}

export interface CallerContext {
  awsSdkVersion: string;
  clientId: string;
}

export interface Request {
  userAttributes: UserAttributes;
}

export interface UserAttributes {
  sub: string;
  email_verified: string;
  "cognito:user_status": string;
  "cognito:email_alias": string;
  email: string;
}

export interface Response {}

export const handler = async (event: ConfirmSignup): Promise<ConfirmSignup> => {
  try {
    const body = JSON.stringify(event);
    const resp = await fetch(NEW_USER_ENDPOINT, {
      method: "POST",
      body,
      headers: {
        "Content-Type": "application/json",
        [SIGNATURE_HEADER]: sign(body),
      },
    });
    if (!resp.ok) {
      throw new Error(await resp.text());
    }
  } catch (e) {
    console.error(e);
  }
  return event;
};
